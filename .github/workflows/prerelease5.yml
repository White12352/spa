name: Build SFA

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TAGS: with_quic,with_grpc,with_wireguard,with_gvisor,with_utls,with_ech,with_clash_api,with_proxyprovider,with_shadowsocksr

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest go version
        id: go_version
        run: |
          echo go_version=$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g') >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.version.outputs.go_version }}

      - name: Checkout Source Code
        run: |
          git clone -b dev-next https://github.com/CHIZI-0618/sing-box code
          cd code
          sed -i '0,/berty.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+/s//&\n\tgithub.com\/Dreamacro\/clash v1.17.0/' go.mod
          awk '/github.com\/ajg\/form v[0-9]+\.[0-9]+\.[0-9]+ \/\/ indirect/ && !inserted {print "\tgithub.com/Dreamacro/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect"; inserted=1} 1' go.mod > temp && mv -f temp go.mod
          sed -i -e '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/ { N; s/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"\n/ }' test/clash_test.go
          #sed -i '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/a \	\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"' test/clash_test.go
          awk '/ImageShadowTLS,/ {print; print "\tImageShadowsocksR,"; next} 1' test/clash_test.go > temp && mv -f temp test/clash_test.go
          sed -i '/berty\.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\//a \\tgithub.com\/Dreamacro\/clash v1.17.0 // indirect\n\tgithub.com\/Dreamacro\/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect' test/go.mod
          awk '/ProtocolSTUN = "stun"/ {print; print "\tProtocolBittorrent = \"bittorrent\""; inserted=1; next} 1; END {if (!inserted) print "\tProtocolBittorrent = \"bittorrent\""}' constant/protocol.go > temp_file && mv -f temp_file constant/protocol.go
          awk '{ if (/sniffMetadata, err := sniff.PeekStream\(ctx, conn, buffer, time\.Duration\(metadata\.InboundOptions\.SniffTimeout\), sniff\.StreamDomainNameQuery, sniff\.TLSClientHello, sniff\.HTTPHost\)/) sub("sniff\\.HTTPHost", "sniff.HTTPHost, sniff.BittorrentTCPMessage") } { print }' route/router.go > temp && mv -f temp route/router.go
          sed -i 's/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage)/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage, sniff.BittorrentUDPMessage)/' route/router.go
          cd ..
          rm -f code/outbound/shadowsocksr.go
          rm -f code/outbound/shadowsocksr_stub.go
          mv -f .github/outbound/* code/outbound/
          mv -f .github/test/* code/test/
          mv -f .github/transport/* code/transport/
          mv -f .github/common/sniff/* code/common/sniff/
          cd code
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          #git remote add PuerNya https://github.com/PuerNya/sing-box
          #git fetch PuerNya building
          #git cherry-pick -x -n $(git log PuerNya/building --grep=keep-ssr --format=format:"%H")
          #git cherry-pick -x -n $(git log PuerNya/building --grep=bittorrent --format=format:"%H")
          #git revert b728ba5
          cd ..
          git clone -b dev https://github.com/SagerNet/sing-quic sing-quic
          cd code/test
          go mod tidy
          cd ..
          go mod tidy
          cd ..
          #mv ${{ github.workspace }}/code/* ${{ github.workspace }} && rm -rf ${{ github.workspace }}/code
          #git clone -b build https://github.com/yaotthaha/sing-box-for-android SFA
          git clone -b main https://github.com/SagerNet/sing-box-for-android SFA
          cd SFA
          #git remote add snsfa https://github.com/SagerNet/sing-box-for-android
          #git fetch snsfa main
          #git merge snsfa/main
          cd ..

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: 20

      - name: Prepare
        run: |
          cd code
          export VERSION_NAME=$(CGO_ENABLED=0 go run ./cmd/internal/read_tag)
          export VERSION_CODE=$(date +%Y%m%d%H)
          cd ..
          tag="${VERSION_NAME}-$(date +%Y%m%d%H%M)"
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
          echo "VERSION_CODE=${VERSION_CODE}" >> $GITHUB_ENV
          echo "TAG=${tag}" >> $GITHUB_ENV
          echo "RELEASE_NAME=s-${tag}" >> $GITHUB_ENV
          tag2=$(echo $VERSION_NAME | cut -d'-' -f3)
          echo "TAG_NAME=${tag2}" >> $GITHUB_ENV

      - name: Verify Environment Variables
        run: |
          echo "VERSION_NAME: $VERSION_NAME"
          echo "VERSION_CODE: $VERSION_CODE"
          echo "RELEASE_NAME: $RELEASE_NAME"
          echo "TAG_NAME: $TAG_NAME"
      
      - name: Build SFA
        env:
          KEYSTORE_PATH: "${{ github.workspace }}/.github/k.jks"
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          ALIAS_NAME: ${{ secrets.ALIAS_NAME }}
          ALIAS_PASS: ${{ secrets.ALIAS_PASS }}
          VERSION_NAME: ${{ env.VERSION_NAME }}
          VERSION_CODE: ${{ env.VERSION_CODE }}
        run: |
          mkdir -p SFA/app/libs/
          cd code
          make lib_install
          VERSION_NAME=${VERSION_NAME}
          CGO_ENABLED=1 gomobile bind -v -androidapi 21 -javapkg=io.nekohasekai -libname=box -tags ${TAGS} -ldflags "-X github.com/sagernet/sing-box/constant.Version=${VERSION_NAME} -buildid=" ./experimental/libbox
          cp ./libbox.aar ${{ github.workspace }}/SFA/app/libs/
          cd ../SFA
          #sed -i '23s|.*|        versionCode getProps("VERSION_CODE").toInteger()|' ${{ github.workspace }}/SFA/app/build.gradle
          #sed -i '24s|.*|        versionName getProps("VERSION_NAME")|' ${{ github.workspace }}/SFA/app/build.gradle
          #sed -i '30s|.*|            storeFile file(System.getenv("KEYSTORE_PATH"))|' ${{ github.workspace }}/SFA/app/build.gradle
          awk 'BEGIN {count=0} {while (count<5 && sub(/getProps/, "System.getenv")) count++; print}' ${{ github.workspace }}/SFA/app/build.gradle > temp_file && mv -f temp_file ${{ github.workspace }}/SFA/app/build.gradle
          #sed -i '0,/storeFile file("android.jks")/s/storeFile file("android.jks")/storeFile file(System.getenv("KEYSTORE_PATH"))/1' ${{ github.workspace }}/SFA/app/build.gradle
          sed -i '0,/storeFile file("release.keystore")/s/storeFile file("release.keystore")/storeFile file(System.getenv("KEYSTORE_PATH"))/1' ${{ github.workspace }}/SFA/app/build.gradle
          #sed -i '/fun updateGroups(groups: List<OutboundGroup>) {}/a\        fun clearLog() {}' ${{ github.workspace }}/SFA/app/src/main/java/io/nekohasekai/sfa/utils/CommandClient.kt
          #sed -i '0,/handler.updateGroups(groups)/s/handler.updateGroups(groups)/handler.updateGroups(groups)\n        }\n\n        override fun clearLog() {\n           handler.clearLog()/1' ${{ github.workspace }}/SFA/app/src/main/java/io/nekohasekai/sfa/utils/CommandClient.kt
          #chmod +x ./gradlew
          #dos2unix ./gradlew
          chmod 0755 ./gradlew
          ./gradlew assembleRelease

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: SFA
          path: ${{ github.workspace }}/SFA/app/build/outputs/apk/

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        with:
          tag: ${{ env.TAG_NAME }}
          tag_name: ${{ env.RELEASE_NAME }}
          files: ${{ github.workspace }}/SFA/app/build/outputs/apk/release/*.apk
          prerelease: true
          generate_release_notes: true
