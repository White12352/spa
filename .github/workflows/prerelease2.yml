name: Prerelease2
on:
  workflow_dispatch:
  push:
    branches:
      - dev-next
      - debug
jobs:
  Build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithoutCGO", name: "windows-amd64-v3.exe", goos: "windows", goarch: "amd64", goamd64: "v3", id: "1" }
          - { type: "WithoutCGO", name: "linux-arm64", goos: "linux", goarch: "arm64", id: "2" }
          - { type: "WithCGO", target: "windows/*", id: "1" }
          - { type: "WithCGO", target: "linux/386,linux/amd64", id: "2" }
          - { type: "WithCGO", target: "linux/arm64,linux/riscv64", id: "3" }
          - { type: "WithCGO", target: "linux/arm,linux/arm-6,linux/arm-7", id: "4" }
          - { type: "WithCGO", target: "linux/mips,linux/mipsle", id: "5" }
          - { type: "WithCGO", target: "linux/mips64,linux/mips64le", id: "6" }
          - { type: "WithCGO", target: "darwin-10.16/*", id: "7" }
          - { type: "WithCGO", target: "android-arm64", id: "8" }

    outputs:
      output1: ${{ steps.version2.outputs.VERSION }}
      output2: ${{ steps.zip.outputs.TIME }}
    
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      
      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          git clone -b dev https://github.com/White12352/sing sing
          mv -f .github/proxyproto/ sing-box/common/
          cd sing-box
          #svn co https://github.com/White12352/sing-box/branches/dev-next/common/proxyproto common/proxyproto
          sed -i '0,/github.com\/oschwald\/maxminddb-golang v[0-9]\+\.[0-9]\+\.[0-9]\+/s//&\n\tgithub.com\/pires\/go-proxyproto v0.7.0/' go.mod
          sed -i '0,/N "github.com\/sagernet\/sing\/common\/network"/s//&\n\n\t"github.com\/pires\/go-proxyproto"/' outbound/direct.go
          sed -i '0,/overrideDestination M.Socksaddr/s//&\n\tproxyProto          uint8/' outbound/direct.go
          sed -i '0,/dialer:         outboundDialer,/s//&\n\t\tproxyProto:     options.ProxyProtocol,/' outbound/direct.go
          sed -i 's/if options.ProxyProtocol != 0 {/if options.ProxyProtocol > 2 {/1' outbound/direct.go
          sed -i 's/return nil, E.New("Proxy Protocol is deprecated and removed in sing-box 1.6.0")/return nil, E.New("invalid proxy protocol option: ", options.ProxyProtocol)/1' outbound/direct.go
          #sed -i '0,/ctx, metadata := adapter.AppendContext(ctx)/s//&\n\toriginDestination := metadata.Destination/1' outbound/direct.go
          sed -i $'s#return h.dialer.DialContext(ctx, network, destination)#conn, err := h.dialer.DialContext(ctx, network, destination)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          #sed -i 's/ctx, metadata := adapter.AppendContext(ctx)/ctx, metadata := adapter.AppendContext(ctx)\n\toriginDestination := metadata.Destination/2' outbound/direct.go
          awk '/ctx, metadata := adapter\.AppendContext\(ctx\)/ && count < 2 { sub(/ctx, metadata := adapter\.AppendContext\(ctx\)/, "&\n\toriginDestination := metadata.Destination"); count++; } 1' outbound/direct.go > temp_file && mv -f temp_file outbound/direct.go
          sed -i $'s#return N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)#conn, err := N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          sed -i '0,/"github.com\/sagernet\/sing-box\/adapter"/s//&\n\t"github.com\/sagernet\/sing-box\/common\/proxyproto"/' inbound/default_tcp.go
          awk '{if (/return nil, E.New\("Proxy Protocol is deprecated and removed in sing-box 1.6.0"\)/ && !replaced) {print "\t\ta.logger.Debug(\"proxy protocol enabled\")\n\t\ttcpListener = &proxyproto.Listener{Listener: tcpListener, AcceptNoHeader: a.listenOptions.ProxyProtocolAcceptNoHeader}"; replaced = 1;} else {print}}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          awk '{if (/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/ && !replaced) {sub(/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/, "if a.listenOptions.ProxyProtocol {", $0); replaced = 1;} print}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          sed -i '/github.com\/pierrec\/lz4\/v[0-999]\+ v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\/ indirect/ a\\tgithub.com/pires/go-proxyproto v0.7.0 // indirect' test/go.mod
          sed -i '0,/berty.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+/s//&\n\tgithub.com\/Dreamacro\/clash v1.17.0/' go.mod
          awk '/github.com\/ajg\/form v[0-9]+\.[0-9]+\.[0-9]+ \/\/ indirect/ && !inserted {print "\tgithub.com/Dreamacro/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect"; inserted=1} 1' go.mod > temp && mv -f temp go.mod
          sed -i -e '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/ { N; s/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"\n/ }' test/clash_test.go
          #sed -i '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/a \	\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"' test/clash_test.go
          awk '/ImageShadowTLS,/ {print; print "\tImageShadowsocksR,"; next} 1' test/clash_test.go > temp && mv -f temp test/clash_test.go
          sed -i '/berty\.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\//a \\tgithub.com\/Dreamacro\/clash v1.17.0 // indirect\n\tgithub.com\/Dreamacro\/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect' test/go.mod
          awk '/ProtocolSTUN = "stun"/ {print; print "\tProtocolBittorrent = \"bittorrent\""; inserted=1; next} 1; END {if (!inserted) print "\tProtocolBittorrent = \"bittorrent\""}' constant/protocol.go > temp_file && mv -f temp_file constant/protocol.go
          awk '{ if (/sniffMetadata, err := sniff.PeekStream\(ctx, conn, buffer, time\.Duration\(metadata\.InboundOptions\.SniffTimeout\), sniff\.StreamDomainNameQuery, sniff\.TLSClientHello, sniff\.HTTPHost\)/) sub("sniff\\.HTTPHost", "sniff.HTTPHost, sniff.BittorrentTCPMessage") } { print }' route/router.go > temp && mv -f temp route/router.go
          sed -i 's/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage)/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage, sniff.BittorrentUDPMessage)/' route/router.go
          awk '{if(index($0, "//replace github.com/sagernet/sing") > 0) $0 = "replace github.com/sagernet/sing => ../sing"}1' go.mod > temp_file && mv -f temp_file go.mod
          awk '/^replace/ && !found {print "replace github.com/sagernet/sing => ../../sing"; found=1} 1' test/go.mod > go.mod.tmp && mv -f go.mod.tmp test/go.mod
          cd ..
          rm -f sing-box/outbound/shadowsocksr.go
          rm -f sing-box/outbound/shadowsocksr_stub.go
          mv -f .github/outbound/* sing-box/outbound/
          mv -f .github/test/* sing-box/test/
          mv -f .github/transport/* sing-box/transport/
          mv -f .github/common/sniff/* sing-box/common/sniff/
          cd sing-box
          #git config --global user.email "you@example.com"
          #git config --global user.name "Your Name"
          #git reset --hard d0c0315
          #git revert 57521fd
          #git revert b728ba5
          #git remote add sing-box https://github.com/White12352/sing-box
          #git fetch sing-box dev-next
          #git cherry-pick -x -n d18b973
          #git cherry-pick -x -n 4be2727
          #git cherry-pick -x -n 8825a52
          #git cherry-pick -x -n 4232b20
          #git cherry-pick -x -n c472e13
          #git remote add PuerNya https://github.com/PuerNya/sing-box && git fetch PuerNya sniff-bittorrent
          #git cherry-pick -x -n $(git log PuerNya/sniff-bittorrent --grep=bittorrent --format=format:"%H")
          cd ..
          git clone -b dev https://github.com/SagerNet/sing-quic sing-quic
          cd sing-box/test
          go mod tidy
          cd ..
          go mod tidy
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          #git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          #git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash
      
      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      #- name: Setup Libevent
        #run: |
          #wget https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
          #tar -zxvf libevent-2.1.12-stable.tar.gz
          #cd libevent-2.1.12-stable
          #./configure -prefix=/home/runner/go/pkg/mod/berty.tech/go-libtor@v1.0.385/libtor
          #make
          #make install
          #cd ..
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...
          
      - name: Version
        id: version2
        run: |
          cd sing-box
          GOHOSTOS=$(go env GOHOSTOS)
          GOHOSTARCH=$(go env GOHOSTARCH)
          echo ::set-output name=VERSION::$(CGO_ENABLED=0 GOOS=${GOHOSTOS} GOARCH=${GOHOSTARCH} go run ./cmd/internal/read_tag)
          cd ..
      
      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_utls,with_shadowsocksr
          LDFLAGS: -X 'github.com/sagernet/sing-box/constant.Version=${{ steps.version2.outputs.VERSION }}' -s -w -buildid=
          CGO_ENABLED: 0
          GOOS: ${{ matrix.job.goos }}
          GOARCH: ${{ matrix.job.goarch }}
          GOAMD64: ${{ matrix.job.goamd64 }}
          GOARM: ${{ matrix.job.goarm }}
          DIST: dist
          NAME: sing-box-${{ matrix.job.name }}
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} GOOS=${GOOS} GOARCH=${GOARCH} GOAMD64=${GOAMD64} GOAMRM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
      
      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm64' }}
        id: setup-ndk
        with:
          ndk-version: r25c
          add-to-path: false
          local-cache: true
      
      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm64' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_reality_server,with_dhcp,with_shadowsocksr
          LDFLAGS: -X 'github.com/sagernet/sing-box/constant.Version=${{ steps.version2.outputs.VERSION }}' -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
          GOARCH: arm64
          GOOS: android
          DIST: dist
          NAME: sing-box-android-arm64
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          CGO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
      
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm64' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm64' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_quic,with_dhcp,with_ech,with_reality_server,with_gvisor,with_shadowsocksr
          LDFLAGS: -X 'github.com/sagernet/sing-box/constant.Version=${{ steps.version2.outputs.VERSION }}' -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} ${MAIN}
          cd ..

      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la        
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        id: zip
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          export time=$(date +%Y%m%d%H) && echo ::set-output name=TIME::${time}
          export VERSION=${{ steps.version2.outputs.VERSION }}-${time}
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Build2:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithCGO", target: "android-arm-7", id: "1" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          mv -f .github/proxyproto/ sing-box/common/
          cd sing-box
          #svn co https://github.com/White12352/sing-box/branches/dev-next/common/proxyproto common/proxyproto
          sed -i '0,/github.com\/oschwald\/maxminddb-golang v[0-9]\+\.[0-9]\+\.[0-9]\+/s//&\n\tgithub.com\/pires\/go-proxyproto v0.7.0/' go.mod
          sed -i '0,/N "github.com\/sagernet\/sing\/common\/network"/s//&\n\n\t"github.com\/pires\/go-proxyproto"/' outbound/direct.go
          sed -i '0,/overrideDestination M.Socksaddr/s//&\n\tproxyProto          uint8/' outbound/direct.go
          sed -i '0,/dialer:         outboundDialer,/s//&\n\t\tproxyProto:     options.ProxyProtocol,/' outbound/direct.go
          sed -i 's/if options.ProxyProtocol != 0 {/if options.ProxyProtocol > 2 {/1' outbound/direct.go
          sed -i 's/return nil, E.New("Proxy Protocol is deprecated and removed in sing-box 1.6.0")/return nil, E.New("invalid proxy protocol option: ", options.ProxyProtocol)/1' outbound/direct.go
          #sed -i '0,/ctx, metadata := adapter.AppendContext(ctx)/s//&\n\toriginDestination := metadata.Destination/1' outbound/direct.go
          sed -i $'s#return h.dialer.DialContext(ctx, network, destination)#conn, err := h.dialer.DialContext(ctx, network, destination)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          #sed -i 's/ctx, metadata := adapter.AppendContext(ctx)/ctx, metadata := adapter.AppendContext(ctx)\n\toriginDestination := metadata.Destination/2' outbound/direct.go
          awk '/ctx, metadata := adapter\.AppendContext\(ctx\)/ && count < 2 { sub(/ctx, metadata := adapter\.AppendContext\(ctx\)/, "&\n\toriginDestination := metadata.Destination"); count++; } 1' outbound/direct.go > temp_file && mv -f temp_file outbound/direct.go
          sed -i $'s#return N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)#conn, err := N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          sed -i '0,/"github.com\/sagernet\/sing-box\/adapter"/s//&\n\t"github.com\/sagernet\/sing-box\/common\/proxyproto"/' inbound/default_tcp.go
          awk '{if (/return nil, E.New\("Proxy Protocol is deprecated and removed in sing-box 1.6.0"\)/ && !replaced) {print "\t\ta.logger.Debug(\"proxy protocol enabled\")\n\t\ttcpListener = &proxyproto.Listener{Listener: tcpListener, AcceptNoHeader: a.listenOptions.ProxyProtocolAcceptNoHeader}"; replaced = 1;} else {print}}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          awk '{if (/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/ && !replaced) {sub(/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/, "if a.listenOptions.ProxyProtocol {", $0); replaced = 1;} print}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          sed -i '/github.com\/pierrec\/lz4\/v[0-999]\+ v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\/ indirect/ a\\tgithub.com/pires/go-proxyproto v0.7.0 // indirect' test/go.mod
          sed -i '0,/berty.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+/s//&\n\tgithub.com\/Dreamacro\/clash v1.17.0/' go.mod
          awk '/github.com\/ajg\/form v[0-9]+\.[0-9]+\.[0-9]+ \/\/ indirect/ && !inserted {print "\tgithub.com/Dreamacro/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect"; inserted=1} 1' go.mod > temp && mv -f temp go.mod
          sed -i -e '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/ { N; s/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"\n/ }' test/clash_test.go
          #sed -i '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/a \	\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"' test/clash_test.go
          awk '/ImageShadowTLS,/ {print; print "\tImageShadowsocksR,"; next} 1' test/clash_test.go > temp && mv -f temp test/clash_test.go
          sed -i '/berty\.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\//a \\tgithub.com\/Dreamacro\/clash v1.17.0 // indirect\n\tgithub.com\/Dreamacro\/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect' test/go.mod
          awk '/ProtocolSTUN = "stun"/ {print; print "\tProtocolBittorrent = \"bittorrent\""; inserted=1; next} 1; END {if (!inserted) print "\tProtocolBittorrent = \"bittorrent\""}' constant/protocol.go > temp_file && mv -f temp_file constant/protocol.go
          awk '{ if (/sniffMetadata, err := sniff.PeekStream\(ctx, conn, buffer, time\.Duration\(metadata\.InboundOptions\.SniffTimeout\), sniff\.StreamDomainNameQuery, sniff\.TLSClientHello, sniff\.HTTPHost\)/) sub("sniff\\.HTTPHost", "sniff.HTTPHost, sniff.BittorrentTCPMessage") } { print }' route/router.go > temp && mv -f temp route/router.go
          sed -i 's/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage)/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage, sniff.BittorrentUDPMessage)/' route/router.go
          cd ..
          rm -f sing-box/outbound/shadowsocksr.go
          rm -f sing-box/outbound/shadowsocksr_stub.go
          mv -f .github/outbound/* sing-box/outbound/
          mv -f .github/test/* sing-box/test/
          mv -f .github/transport/* sing-box/transport/
          mv -f .github/common/sniff/* sing-box/common/sniff/
          cd sing-box
          #git config --global user.email "you@example.com"
          #git config --global user.name "Your Name"
          #git reset --hard d0c0315
          #git revert 57521fd
          #git revert b728ba5
          #git remote add sing-box https://github.com/White12352/sing-box
          #git fetch sing-box dev-next
          #git cherry-pick -x -n d18b973
          #git cherry-pick -x -n 4be2727
          #git cherry-pick -x -n 8825a52
          #git cherry-pick -x -n 4232b20
          #git cherry-pick -x -n c472e13
          #git remote add PuerNya https://github.com/PuerNya/sing-box && git fetch PuerNya sniff-bittorrent
          #git cherry-pick -x -n $(git log PuerNya/sniff-bittorrent --grep=bittorrent --format=format:"%H")
          cd ..
          git clone -b dev https://github.com/SagerNet/sing-quic sing-quic
          cd sing-box/test
          go mod tidy
          cd ..
          go mod tidy
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          #git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          #git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash

      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...

      - name: Version
        id: version2
        run: |
          cd sing-box
          GOHOSTOS=$(go env GOHOSTOS)
          GOHOSTARCH=$(go env GOHOSTARCH)
          echo ::set-output name=VERSION::$(CGO_ENABLED=0 GOOS=${GOHOSTOS} GOARCH=${GOHOSTARCH} go run ./cmd/internal/read_tag)
          cd ..
      
      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor
          VERSION: ${{ steps.version2.outputs.VERSION }}
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS} 
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}
          cd ..

      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
          local-cache: true

      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_reality_server,with_dhcp,with_shadowsocksr
          LDFLAGS: -X 'github.com/sagernet/sing-box/constant.Version=${{ steps.version2.outputs.VERSION }}' -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang
          GOARCH: arm
          GOOS: android
          GOARM: 7
          DIST: dist
          NAME: sing-box-android-arm-7
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
        
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm-7' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm-7' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_reality_server
          LDFLAGS: -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: sing-box/cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --branch ${{ github.ref_name }} --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} github.com/${{ github.repository }}/${MAIN}
          cd ..

      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          export VERSION=${{ steps.version2.outputs.VERSION }}-$(date +%Y%m%d%H)
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Build3:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithCGO", target: "windows-amd64-gui", id: "1" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev gcc-mingw-w64
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          mv -f .github/proxyproto/ sing-box/common/
          cd sing-box
          #svn co https://github.com/White12352/sing-box/branches/dev-next/common/proxyproto common/proxyproto
          sed -i '0,/github.com\/oschwald\/maxminddb-golang v[0-9]\+\.[0-9]\+\.[0-9]\+/s//&\n\tgithub.com\/pires\/go-proxyproto v0.7.0/' go.mod
          sed -i '0,/N "github.com\/sagernet\/sing\/common\/network"/s//&\n\n\t"github.com\/pires\/go-proxyproto"/' outbound/direct.go
          sed -i '0,/overrideDestination M.Socksaddr/s//&\n\tproxyProto          uint8/' outbound/direct.go
          sed -i '0,/dialer:         outboundDialer,/s//&\n\t\tproxyProto:     options.ProxyProtocol,/' outbound/direct.go
          sed -i 's/if options.ProxyProtocol != 0 {/if options.ProxyProtocol > 2 {/1' outbound/direct.go
          sed -i 's/return nil, E.New("Proxy Protocol is deprecated and removed in sing-box 1.6.0")/return nil, E.New("invalid proxy protocol option: ", options.ProxyProtocol)/1' outbound/direct.go
          #sed -i '0,/ctx, metadata := adapter.AppendContext(ctx)/s//&\n\toriginDestination := metadata.Destination/1' outbound/direct.go
          sed -i $'s#return h.dialer.DialContext(ctx, network, destination)#conn, err := h.dialer.DialContext(ctx, network, destination)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          #sed -i 's/ctx, metadata := adapter.AppendContext(ctx)/ctx, metadata := adapter.AppendContext(ctx)\n\toriginDestination := metadata.Destination/2' outbound/direct.go
          awk '/ctx, metadata := adapter\.AppendContext\(ctx\)/ && count < 2 { sub(/ctx, metadata := adapter\.AppendContext\(ctx\)/, "&\n\toriginDestination := metadata.Destination"); count++; } 1' outbound/direct.go > temp_file && mv -f temp_file outbound/direct.go
          sed -i $'s#return N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)#conn, err := N.DialParallel(ctx, h.dialer, network, destination, destinationAddresses, domainStrategy == dns.DomainStrategyPreferIPv6, h.fallbackDelay)\\n\\tif err != nil {\\n\\t\\treturn nil, err\\n\\t}\\n\\tif h.proxyProto > 0 {\\n\\t\\tsource := metadata.Source\\n\\t\\tif !source.IsValid() {\\n\\t\\t\\tsource = M.SocksaddrFromNet(conn.LocalAddr())\\n\\t\\t}\\n\\t\\tif originDestination.Addr.Is6() {\\n\\t\\t\\tsource = M.SocksaddrFrom(netip.AddrFrom16(source.Addr.As16()), source.Port)\\n\\t\\t}\\n\\t\\theader := proxyproto.HeaderProxyFromAddrs(h.proxyProto, source.TCPAddr(), originDestination.TCPAddr())\\n\\t\\t_, err = header.WriteTo(conn)\\n\\t\\tif err != nil {\\n\\t\\t\\tconn.Close()\\n\\t\\t\\treturn nil, E.Cause(err, "write proxy protocol header")\\n\\t\\t}\\n\\t}\\n\\treturn conn, nil#1' outbound/direct.go
          sed -i '0,/"github.com\/sagernet\/sing-box\/adapter"/s//&\n\t"github.com\/sagernet\/sing-box\/common\/proxyproto"/' inbound/default_tcp.go
          awk '{if (/return nil, E.New\("Proxy Protocol is deprecated and removed in sing-box 1.6.0"\)/ && !replaced) {print "\t\ta.logger.Debug(\"proxy protocol enabled\")\n\t\ttcpListener = &proxyproto.Listener{Listener: tcpListener, AcceptNoHeader: a.listenOptions.ProxyProtocolAcceptNoHeader}"; replaced = 1;} else {print}}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          awk '{if (/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/ && !replaced) {sub(/if a.listenOptions.ProxyProtocol \|\| a.listenOptions.ProxyProtocolAcceptNoHeader \{/, "if a.listenOptions.ProxyProtocol {", $0); replaced = 1;} print}' inbound/default_tcp.go > temp_file && mv -f temp_file inbound/default_tcp.go
          sed -i '/github.com\/pierrec\/lz4\/v[0-999]\+ v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\/ indirect/ a\\tgithub.com/pires/go-proxyproto v0.7.0 // indirect' test/go.mod
          sed -i '0,/berty.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+/s//&\n\tgithub.com\/Dreamacro\/clash v1.17.0/' go.mod
          awk '/github.com\/ajg\/form v[0-9]+\.[0-9]+\.[0-9]+ \/\/ indirect/ && !inserted {print "\tgithub.com/Dreamacro/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect"; inserted=1} 1' go.mod > temp && mv -f temp go.mod
          sed -i -e '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/ { N; s/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"\n\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"\n/ }' test/clash_test.go
          #sed -i '/ImageShadowTLS             = "ghcr.io\/ihciah\/shadow-tls:latest"/a \	\tImageShadowsocksR          = "teddysun\/shadowsocks-r:latest"' test/clash_test.go
          awk '/ImageShadowTLS,/ {print; print "\tImageShadowsocksR,"; next} 1' test/clash_test.go > temp && mv -f temp test/clash_test.go
          sed -i '/berty\.tech\/go-libtor v[0-999]\+\.[0-999]\+\.[0-999]\+ \/\//a \\tgithub.com\/Dreamacro\/clash v1.17.0 // indirect\n\tgithub.com\/Dreamacro\/protobytes v0.0.0-20230617041236-6500a9f4f158 // indirect' test/go.mod
          awk '/ProtocolSTUN = "stun"/ {print; print "\tProtocolBittorrent = \"bittorrent\""; inserted=1; next} 1; END {if (!inserted) print "\tProtocolBittorrent = \"bittorrent\""}' constant/protocol.go > temp_file && mv -f temp_file constant/protocol.go
          awk '{ if (/sniffMetadata, err := sniff.PeekStream\(ctx, conn, buffer, time\.Duration\(metadata\.InboundOptions\.SniffTimeout\), sniff\.StreamDomainNameQuery, sniff\.TLSClientHello, sniff\.HTTPHost\)/) sub("sniff\\.HTTPHost", "sniff.HTTPHost, sniff.BittorrentTCPMessage") } { print }' route/router.go > temp && mv -f temp route/router.go
          sed -i 's/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage)/sniffMetadata, _ := sniff.PeekPacket(ctx, buffer.Bytes(), sniff.DomainNameQuery, sniff.QUICClientHello, sniff.STUNMessage, sniff.BittorrentUDPMessage)/' route/router.go
          cd ..
          rm -f sing-box/outbound/shadowsocksr.go
          rm -f sing-box/outbound/shadowsocksr_stub.go
          mv -f .github/outbound/* sing-box/outbound/
          mv -f .github/test/* sing-box/test/
          mv -f .github/transport/* sing-box/transport/
          mv -f .github/common/sniff/* sing-box/common/sniff/
          cd sing-box
          #git config --global user.email "you@example.com"
          #git config --global user.name "Your Name"
          #git reset --hard d0c0315
          #git revert 57521fd
          #git revert b728ba5
          #git remote add sing-box https://github.com/White12352/sing-box
          #git fetch sing-box dev-next
          #git cherry-pick -x -n d18b973
          #git cherry-pick -x -n 4be2727
          #git cherry-pick -x -n 8825a52
          #git cherry-pick -x -n 4232b20
          #git cherry-pick -x -n c472e13
          #git remote add PuerNya https://github.com/PuerNya/sing-box && git fetch PuerNya sniff-bittorrent
          #git cherry-pick -x -n $(git log PuerNya/sniff-bittorrent --grep=bittorrent --format=format:"%H")
          cd ..
          git clone -b dev https://github.com/SagerNet/sing-quic sing-quic
          cd sing-box/test
          go mod tidy
          cd ..
          go mod tidy
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          #git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          #git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash

      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...
      
      - name: Version
        id: version2
        run: |
          cd sing-box
          GOHOSTOS=$(go env GOHOSTOS)
          GOHOSTARCH=$(go env GOHOSTARCH)
          echo ::set-output name=VERSION::$(CGO_ENABLED=0 GOOS=${GOHOSTOS} GOARCH=${GOHOSTARCH} go run ./cmd/internal/read_tag)
          cd ..
      
      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS} 
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}
          cd ..
      
      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
          local-cache: true

      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip
          LDFLAGS: -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang
          GOARCH: arm
          GOOS: android
          GOARM: 7
          DIST: dist
          NAME: sing-box-android-arm-7
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
        
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='windows-amd64-gui' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest
      
      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='windows-amd64-gui' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip
          LDFLAGS: -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: sing-box/cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --branch ${{ github.ref_name }} --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} github.com/${{ github.repository }}/${MAIN}
          cd ..
      
      - name: Build background sing-box on Windows
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='windows-amd64-gui' }}
        env:
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_shadowsocksr
          LDFLAGS: -X 'github.com/sagernet/sing-box/constant.Version=${{ steps.version2.outputs.VERSION }}' -H windowsgui -s -w -buildid=
          CGO_ENABLED: 1
          CC: x86_64-w64-mingw32-gcc
          GOARCH: amd64
          GOOS: windows
          GOAMD64: v3
          DIST: dist
          NAME: sing-box-windows-amd64-gui
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOAMD64=${GOAMD64} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
      
      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          export VERSION=${{ steps.version2.outputs.VERSION }}-$(date +%Y%m%d%H)
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Upload:
    permissions: write-all
    needs: [ Build, Build2, Build3 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: sing-box/dist/

      - name: Display structure of downloaded files
        run: ls -R && echo "time=${{ needs.Build.outputs.output2 }}" >> $GITHUB_ENV && echo "version=$(echo ${{ needs.Build.outputs.output1 }} | rev | cut -d '-' -f 1 | rev)" >> $GITHUB_ENV
        working-directory: sing-box/dist

      - name: Delete current release assets
        uses: andreaswilli/delete-release-assets-action@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: dev-next2-${{ github.ref_name }}
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1.0.6
        with:
          tag_name: dev-next-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag: ${{ github.ref_name }}
          tag_name: dev-next2-${{ github.ref_name }}
          files: sing-box/dist/*
          prerelease: true
          generate_release_notes: true
      
      - name: Upload Prerelease2
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}-${{ env.time }}-${{ env.version }}
          files: sing-box/dist/*
          prerelease: true
          generate_release_notes: true
