name: Prerelease3
on:
  workflow_dispatch:
  push:
    branches:
      - dev-next
      - debug
jobs:
  Build:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithoutCGO", name: "windows-amd64", goos: "windows", goarch: "amd64", goamd64: "v1", id: "1" }
          - { type: "WithCGO", target: "windows/*", id: "1" }
          - { type: "WithCGO", target: "linux/386,linux/amd64", id: "2" }
          - { type: "WithCGO", target: "linux/arm64,linux/riscv64", id: "3" }
          - { type: "WithCGO", target: "linux/arm,linux/arm-6,linux/arm-7", id: "4" }
          - { type: "WithCGO", target: "linux/mips,linux/mipsle", id: "5" }
          - { type: "WithCGO", target: "linux/mips64,linux/mips64le", id: "6" }
          - { type: "WithCGO", target: "darwin-10.16/*", id: "7" }
          - { type: "WithCGO", target: "android-arm64", id: "8" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      
      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          #git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          cd sing-box
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash
      
      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      #- name: Setup Libevent
        #run: |
          #wget https://github.com/libevent/libevent/releases/download/release-2.1.12-stable/libevent-2.1.12-stable.tar.gz
          #tar -zxvf libevent-2.1.12-stable.tar.gz
          #cd libevent-2.1.12-stable
          #./configure -prefix=/home/runner/go/pkg/mod/berty.tech/go-libtor@v1.0.385/libtor
          #make
          #make install
          #cd ..
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...

      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor,with_http_custom_header,with_provider_loadbalance
          LDFLAGS: -s -w -buildid=
          CGO_ENABLED: 0
          GOOS: ${{ matrix.job.goos }}
          GOARCH: ${{ matrix.job.goarch }}
          GOAMD64: ${{ matrix.job.goamd64 }}
          GOARM: ${{ matrix.job.goarm }}
          DIST: dist
          NAME: sing-box-${{ matrix.job.name }}
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} GOOS=${GOOS} GOARCH=${GOARCH} GOAMD64=${GOAMD64} GOAMRM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..

      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm64' }}
        id: setup-ndk
        with:
          ndk-version: r25b
          add-to-path: false
          local-cache: true
      
      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm64' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_reality_server,with_dhcp,with_provider_loadbalance
          LDFLAGS: -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
          GOARCH: arm64
          GOOS: android
          DIST: dist
          NAME: sing-box-android-arm64
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          CGO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
          
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm64' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm64' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_reality_server,with_dhcp,with_provider_loadbalance
          LDFLAGS: -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} ${MAIN}
          cd ..

      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la        
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Build2:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithCGO", target: "android-arm-7", id: "1" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          #git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          cd sing-box
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash

      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...

      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS} 
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}
          cd ..

      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
          local-cache: true

      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_reality_server,with_dhcp,with_provider_loadbalance
          LDFLAGS: -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang
          GOARCH: arm
          GOOS: android
          GOARM: 7
          DIST: dist
          NAME: sing-box-android-arm-7
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
        
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm-7' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest

      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='android-arm-7' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip
          LDFLAGS: -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: sing-box/cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --branch ${{ github.ref_name }} --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} github.com/${{ github.repository }}/${MAIN}
          cd ..

      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Build3:
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job:
          - { type: "WithCGO", target: "windows-amd64-gui", id: "1" }

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Initialization environment
        run: |
          sudo apt -y update
          sudo apt -y install curl git build-essential libssl-dev libevent-dev zlib1g-dev gcc-mingw-w64
      
      - name: Add proxy providers
        run: |
          #git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          #git clone https://github.com/qjebbs/sing-box sing-box.bak
          #cd sing-box.bak
          #COMMIT=$(git log --pretty=format:"%h-%s"|grep provider|awk -F "-" '{print $1}')
          #cd ../sing-box
          #git checkout dev-next
          #git remote add qjebbs https://github.com/qjebbs/sing-box
          #git fetch qjebbs
          #git cherry-pick $COMMIT || true
          ##git add mkdocs.yml
          ##git -c core.editor=true cherry-pick --continue
          ##sed -i "s/outbound := range r.outbounds/outbound := range r.outbounds.All()/g" route/router.go
          #sed -i "s/v.TLSAllowInsecure/true/g" common/link/vmess.go
          #git clone -b dev-next https://github.com/SagerNet/sing-box sing-box
          git clone -b dev-next https://github.com/qjebbs/sing-box sing-box
          cd sing-box
          #git checkout -b cherry-pick_provider
          #git remote add qjebbs https://github.com/qjebbs/sing-box && git fetch --depth=3 qjebbs
          #git cherry-pick -x -n $(git log qjebbs/dev-next --grep=provider --format=format:"%H")
          git remote add Adlyq https://github.com/Adlyq/sing-box && git fetch Adlyq
          git cherry-pick $(git log Adlyq/dev-next --grep="custom header" --format=format:"%H") -x -n
          cd ..
      
      - name: Set ENV
        run: |
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ShortSHA=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_ENV
        shell: bash

      - name: Get latest go version
        id: version
        run: |
          echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
      
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ steps.version.outputs.go_version }}
          check-latest: true

      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
          key: go-${{ hashFiles('**/go.sum') }}
      
      - name: Test
        if: ${{ github.ref_name=='debug' && matrix.job.id=='1' && matrix.job.type=='WithoutCGO' }}
        run: |
          go test -v ./...
      
      - name: Build WithoutCGO
        if: ${{ matrix.job.type=='WithoutCGO' }}
        env:
          TAGS: with_gvisor
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS} 
          make -j$(($(nproc) + 1)) ${{ matrix.job.target }}
          cd ..
      
      - uses: nttld/setup-ndk@v1
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
          local-cache: true

      - name: Build Android
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='android-arm-7' }}
        env:
          #ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip
          LDFLAGS: -s -w -buildid=
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang
          GOARCH: arm
          GOOS: android
          GOARM: 7
          DIST: dist
          NAME: sing-box-android-arm-7
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOARM=${GOARM} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
        
      - name: Set up xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='windows-amd64-gui' }}
        run: |
          docker pull techknowlogick/xgo:latest
          go install src.techknowlogick.com/xgo@latest
      
      - name: Build by xgo
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target!='windows-amd64-gui' }}
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip
          LDFLAGS: -s -w -buildid=
          DIST: dist
          NAME: sing-box
          MAIN: sing-box/cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          #go mod tidy -v
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          xgo -v --branch ${{ github.ref_name }} --targets="${{ matrix.job.target }}" --tags="${TAGS}" -ldflags="${LDFLAGS}" --out ${DIST}/${NAME} github.com/${{ github.repository }}/${MAIN}
          cd ..
      
      - name: Build background sing-box on Windows
        if: ${{ matrix.job.type=='WithCGO' && matrix.job.target=='windows-amd64-gui' }}
        env:
          TAGS: with_gvisor,with_quic,with_wireguard,with_grpc,with_ech,with_utls,with_shadowsocksr,with_acme,with_clash_api,with_v2ray_api,with_lwip,with_http_custom_header,with_provider_loadbalance
          LDFLAGS: -s -w -H windowsgui -buildid=
          CGO_ENABLED: 1
          CC: x86_64-w64-mingw32-gcc
          GOARCH: amd64
          GOOS: windows
          GOAMD64: v3
          DIST: dist
          NAME: sing-box-windows-amd64-gui
          MAIN: ./cmd/sing-box
        run: |
          cd sing-box
          mkdir dist
          TAGS=${TAGS}
          LDFLAGS=${LDFLAGS}
          DIST=${DIST}
          NAME=${NAME}
          MAIN=${MAIN}
          GO_ENABLED=${CGO_ENABLED} CC=${CC} GOOS=${GOOS} GOARCH=${GOARCH} GOAMD64=${GOAMD64} go build -v -trimpath -tags ${TAGS} -ldflags "${LDFLAGS}" -o ${DIST}/${NAME} ${MAIN}
          cd ..
      
      - name: Rename
        if: ${{ matrix.job.type=='WithCGO' }}
        run: |
          cd sing-box/dist
          ls -la
          cp ../../.github/rename-cgo.sh ./
          bash ./rename-cgo.sh
          rm ./rename-cgo.sh
          ls -la
          cd ../..
      
      - name: Zip
        if: ${{  success() }}
        run: |
          cd sing-box/dist
          ls -la
          chmod +x *
          cp ../../.github/release.sh ./
          bash ./release.sh
          rm ./release.sh
          ls -la
          cd ../..
      
      - uses: actions/upload-artifact@v3
        if: ${{  success() }}
        with:
          name: artifact
          path: sing-box/dist/

  Upload:
    permissions: write-all
    needs: [ Build, Build2, Build3 ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: sing-box/dist/

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: sing-box/dist

      - name: Delete current release assets
        uses: andreaswilli/delete-release-assets-action@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: dev-next-${{ github.ref_name }}
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1.0.6
        with:
          tag_name: dev-next-${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Prerelease
        uses: softprops/action-gh-release@v1
        if: ${{  success() }}
        with:
          tag: ${{ github.ref_name }}
          tag_name: dev-next3-${{ github.ref_name }}
          files: sing-box/dist/*
          prerelease: true
          generate_release_notes: true
